import { expect, test, describe } from 'vitest'
import { regexCharacterAfterScopeBeforeColon } from '../regex'

describe('Character Between Scope And Semicolon', () => {
  test("not", () => {
    expect("Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs() documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo) documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs () documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs (foo) documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()

    expect("docs: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docsfoo!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docsfoo!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo): Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo)!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs(): Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs()!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()

    expect(" docs: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docsfoo!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docsfoo!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo): Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo)!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo)foo!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo)foo!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs(): Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs()!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs()foo!: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs()!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect(" docs()foo!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)).toBeNull()

    expect("docs:".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs!:".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docsfoo!:".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs!foo:".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docsfoo!foo:".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo):".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo)!:".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs():".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs()!:".match(regexCharacterAfterScopeBeforeColon)).toBeNull()

    expect("docs: ".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs!: ".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docsfoo!: ".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docs!foo: ".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
    expect("docsfoo!foo: ".match(regexCharacterAfterScopeBeforeColon)).toBeNull()
  })
  
  test("match", () => {
    expect("docs()foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs()!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs()foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs()foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs(foo)foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs(foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs(foo)foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs(foo)foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs(foo foo)foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs(foo foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs(foo foo)foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs(foo foo)foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs()foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs()!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs()foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs()foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs(foo)foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs(foo)!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs(foo)foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs(foo)foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs(foo foo)foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs(foo foo)!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs(foo foo)foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs(foo foo)foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs()foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs()!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs()foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs()foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs(foo)foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs(foo)!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs(foo)foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs(foo)foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs(foo foo)foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs(foo foo)!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs(foo foo)foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs(foo foo)foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')

    expect("docs ()foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs ()!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs ()foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs ()foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs (foo)foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs (foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs (foo)foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs (foo)foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs (foo foo)foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs (foo foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs (foo foo)foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs (foo foo)foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs ()foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs ()!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs ()foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs ()foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs (foo)foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs (foo)!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs (foo)foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs (foo)foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs (foo foo)foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs (foo foo)!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs (foo foo)foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs (foo foo)foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs ()foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs ()!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs ()foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs ()foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs (foo)foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs (foo)!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs (foo)foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs (foo)foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docs (foo foo)foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docs (foo foo)!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docs (foo foo)foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docs (foo foo)foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
  
    expect("docsfooo()foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo()!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo()foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo()foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo(foo)foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo(foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo(foo)foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo(foo)foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo(foo foo)foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo(foo foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo(foo foo)foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo(foo foo)foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo()foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo()!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo()foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo()foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo(foo)foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo(foo)!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo(foo)foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo(foo)foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo(foo foo)foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo(foo foo)!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo(foo foo)foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo(foo foo)foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo()foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo()!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo()foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo()foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo(foo)foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo(foo)!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo(foo)foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo(foo)foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo(foo foo)foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo(foo foo)!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo(foo foo)foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo(foo foo)foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
  
    expect("docsfooo ()foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo ()foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo ()!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo ()foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo ()foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo (foo)foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo (foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo (foo)foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo (foo)foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo (foo foo)foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo (foo foo)!foo: Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo (foo foo)foo!: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo (foo foo)foo!foo: Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo ()foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo ()foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo ()!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo ()foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo ()foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo (foo)foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo (foo)!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo (foo)foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo (foo)foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo (foo foo)foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo (foo foo)!foo:Update documentation".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo (foo foo)foo!:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo (foo foo)foo!foo:Update documentation`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo ()foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo ()foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo ()!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo ()foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo ()foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo (foo)foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo (foo)!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo (foo)foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo (foo)foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
    expect("docsfooo (foo foo)foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect("docsfooo (foo foo)!foo:".match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo')
    expect(`docsfooo (foo foo)foo!:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!')
    expect(`docsfooo (foo foo)foo!foo:`.match(regexCharacterAfterScopeBeforeColon)?.groups?.position).toBe('foo!foo')
  })
})
