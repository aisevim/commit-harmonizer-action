import { expect, test, describe } from 'vitest'
import { regexSpaceAfterScopeBeforeColon } from '../regex'

describe.only('Space Between Scope And Semicolon', () => {
  test("not", () => {
    expect("Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs() documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo) documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()

    expect("docs: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs!: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs! : Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs !: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs ! : Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo): Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo)!: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs(): Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs()!: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()

    expect(" docs: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs!: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs! : Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs !: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs ! : Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo): Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo)!: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo) !: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs(foo) ! : Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs(): Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs()!: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs() !: Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs()! : Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect(" docs() ! : Update documentation".match(regexSpaceAfterScopeBeforeColon)).toBeNull()

    expect("docs:".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs!:".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs !:".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs! :".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs ! :".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo):".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs(foo)!:".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs():".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs()!:".match(regexSpaceAfterScopeBeforeColon)).toBeNull()

    expect("docs: ".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs!: ".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs !: ".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs! : ".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
    expect("docs ! : ".match(regexSpaceAfterScopeBeforeColon)).toBeNull()
  })
  
  test("triggered", () => {
    expect("docs() : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs()! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs() !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs() ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs(foo) : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs(foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs(foo) !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs(foo) ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs(foo foo) : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs(foo foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs(foo foo) !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs(foo foo) ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs() :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs()! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs() !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs() ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs(foo) :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs(foo)! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs(foo) !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs(foo) ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs(foo foo) :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs(foo foo)! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs(foo foo) !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs(foo foo) ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs() :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs()! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs() !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs() ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs(foo) :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs(foo)! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs(foo) !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs(foo) ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs(foo foo) :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs(foo foo)! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs(foo foo) !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs(foo foo) ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')

    expect("docs () : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs ()! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs () !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs () ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs (foo) : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs (foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs (foo) !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs (foo) ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs (foo foo) : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs (foo foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs (foo foo) ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs () :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs ()! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs () !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs () ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs (foo) :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs (foo)! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs (foo) !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs (foo) ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs (foo foo) :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs (foo foo)! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs (foo foo) ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs () :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs ()! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs () !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs () ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs (foo) :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs (foo)! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs (foo) !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs (foo) ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docs (foo foo) :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docs (foo foo)! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docs (foo foo) ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
  
    expect("docsfooo() : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo()! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo() !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo() ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo(foo) : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo(foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo(foo) !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo(foo) ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo(foo foo) : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo(foo foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo(foo foo) !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo(foo foo) ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo() :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo()! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo() !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo() ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo(foo) :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo(foo)! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo(foo) !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo(foo) ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo(foo foo) :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo(foo foo)! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo(foo foo) !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo(foo foo) ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo() :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo()! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo() !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo() ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo(foo) :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo(foo)! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo(foo) !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo(foo) ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo(foo foo) :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo(foo foo)! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo(foo foo) !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo(foo foo) ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
  
    expect("docsfooo () : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo () : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo ()! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo () !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo () ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo (foo) : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo (foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo (foo) !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo (foo) ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo (foo foo) : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo (foo foo)! : Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo (foo foo) !: Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo (foo foo) ! : Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo () :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo () :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo ()! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo () !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo () ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo (foo) :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo (foo)! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo (foo) !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo (foo) ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo (foo foo) :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo (foo foo)! :Update documentation".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo (foo foo) !:Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo (foo foo) ! :Update documentation`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo () :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo () :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo ()! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo () !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo () ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo (foo) :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo (foo)! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo (foo) !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo (foo) ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
    expect("docsfooo (foo foo) :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect("docsfooo (foo foo)! :".match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ')
    expect(`docsfooo (foo foo) !:`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' !')
    expect(`docsfooo (foo foo) ! :`.match(regexSpaceAfterScopeBeforeColon)?.groups?.position).toBe(' ! ')
  })
})
