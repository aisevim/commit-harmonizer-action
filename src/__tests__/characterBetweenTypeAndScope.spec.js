import { expect, test, describe } from 'vitest'
import { rulesConfig } from '../rules'

const regexCharacterBetweenTypeAndScope = rulesConfig.find(rule => rule.id === 'CharacterBetweenTypeAndScope')?.regex

describe('Character Between Type And Scope', () => {
  test("not", () => {
    expect("Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs() documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo) documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs () documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs (foo) documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()

    expect("docs: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs!: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs !: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs ! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo): Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo)!: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(): Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs()!: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()

    expect(" docs: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs!: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs !: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs ! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo): Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo)!: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo) !: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo)! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo) ! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (): Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs ()!: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs () !: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs ()! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs () ! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()

    expect("docs:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs!:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs !:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs! :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs ! :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo):".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo)!:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs():".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs()!:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()

    expect("docs: ".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs!: ".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs !: ".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs! : ".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs ! : ".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBeUndefined()
  })
  
  test("match", () => {
    expect("docsfoo() : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() !: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() ! : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) !: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) ! : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)! : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) !: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) ! : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() :Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()! :Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() !:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() ! :Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) :Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)! :Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) !:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) ! :Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) :Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)! :Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) !:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) ! :Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()! :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() !:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() ! :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)! :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) !:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) ! :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)! :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) !:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) ! :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')

    expect("docsfoo()foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()!foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo()foo!: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo()foo!foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)!foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo)foo!: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo)foo!foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)!foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo)foo!: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo)foo!foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()foo:Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()!foo:Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo()foo!:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo()foo!foo:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)foo:Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)!foo:Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo)foo!:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo)foo!foo:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)foo:Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)!foo:Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo)foo!:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo)foo!foo:Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()!foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo()foo!:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo()foo!foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)!foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo)foo!:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo)foo!foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)!foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo)foo!:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo)foo!foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')

    expect("docsfoo() foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() !foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() ! foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() ! foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo!: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo !: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo ! : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo!foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo !foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo ! foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo ! foo : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) !foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) ! foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) ! foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo!: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo !: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo ! : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo!foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo !foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo ! foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo ! foo : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) !foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) ! foo: Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) ! foo : Update documentation".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo!: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo !: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo ! : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo!foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo !foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo ! foo: Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo ! foo : Update documentation`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')

    expect("docsfoo() foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo()foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() !foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() ! foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo() ! foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo!:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo !:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo ! :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo!foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo !foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo ! foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo() foo ! foo :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo)foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) !foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) ! foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo) ! foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo!:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo !:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo ! :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo!foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo !foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo ! foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo) foo ! foo :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo)foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) !foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) ! foo:".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect("docsfoo(foo foo) ! foo :".match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo!:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo !:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo ! :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo!foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo !foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo ! foo:`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
    expect(`docsfoo(foo foo) foo ! foo :`.match(regexCharacterBetweenTypeAndScope)?.groups?.position).toBe('foo')
  })
})
