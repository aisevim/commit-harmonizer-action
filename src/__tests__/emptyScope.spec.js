import { expect, test, describe } from 'vitest'
import { regexEmptyScope } from '../regex'

describe('Empty Scope', () => {
  test("not", () => {
    expect("Update documentation".match(regexEmptyScope)).toBeNull()
    expect("docs documentation".match(regexEmptyScope)).toBeNull()
    expect("docs() documentation".match(regexEmptyScope)).toBeNull()
    expect("docs(foo) documentation".match(regexEmptyScope)).toBeNull()
    expect("docs () documentation".match(regexEmptyScope)).toBeNull()
    expect("docs (foo) documentation".match(regexEmptyScope)).toBeNull()

    expect("docs: Update documentation".match(regexEmptyScope)).toBeNull()
    expect("docs!: Update documentation".match(regexEmptyScope)).toBeNull()
    expect("docs! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect("docs !: Update documentation".match(regexEmptyScope)).toBeNull()
    expect("docs ! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect("docs(foo): Update documentation".match(regexEmptyScope)).toBeNull()
    expect("docs(foo)!: Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo(): Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo()!: Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo()! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo() !: Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo() ! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo (): Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo ()!: Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo ()! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo () !: Update documentation".match(regexEmptyScope)).toBeNull()
    expect("foo () ! : Update documentation".match(regexEmptyScope)).toBeNull()

    expect(" docs: Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs!: Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs !: Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs ! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs (foo): Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs (foo)!: Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs (foo) !: Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs (foo)! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs (foo) ! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs (): Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs ()!: Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs () !: Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs ()! : Update documentation".match(regexEmptyScope)).toBeNull()
    expect(" docs () ! : Update documentation".match(regexEmptyScope)).toBeNull()

    expect("docs:".match(regexEmptyScope)).toBeNull()
    expect("docs!:".match(regexEmptyScope)).toBeNull()
    expect("docs !:".match(regexEmptyScope)).toBeNull()
    expect("docs! :".match(regexEmptyScope)).toBeNull()
    expect("docs ! :".match(regexEmptyScope)).toBeNull()
    expect("docs(foo):".match(regexEmptyScope)).toBeNull()
    expect("docs(foo)!:".match(regexEmptyScope)).toBeNull()

    expect("docs: ".match(regexEmptyScope)).toBeNull()
    expect("docs!: ".match(regexEmptyScope)).toBeNull()
    expect("docs !: ".match(regexEmptyScope)).toBeNull()
    expect("docs! : ".match(regexEmptyScope)).toBeNull()
    expect("docs ! : ".match(regexEmptyScope)).toBeNull()
  })
  
  test("match", () => {
    expect("docs(): Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs()! : Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs() !: Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs() ! : Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs():Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs()! :Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs() !:Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs() ! :Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs():".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs()! :".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs() !:`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs() ! :`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs (): Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs ()! : Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs () !: Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs () ! : Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs ():Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs ()! :Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs () !:Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs () ! :Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs ():".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs ()! :".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs () !:`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs () ! :`.match(regexEmptyScope)?.groups?.position).toBe('()')

    expect("docs(): Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs()!foo: Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs()foo!: Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs()foo!foo: Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs():Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs()!foo:Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs()foo!:Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs()foo!foo:Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs():".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docs()!foo:".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs()foo!:`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docs()foo!foo:`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docsfoo(): Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docsfoo()!foo: Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docsfoo()foo!: Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docsfoo()foo!foo: Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docsfoo():Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docsfoo()!foo:Update documentation".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docsfoo()foo!:Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docsfoo()foo!foo:Update documentation`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docsfoo():".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect("docsfoo()!foo:".match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docsfoo()foo!:`.match(regexEmptyScope)?.groups?.position).toBe('()')
    expect(`docsfoo()foo!foo:`.match(regexEmptyScope)?.groups?.position).toBe('()')
  })
})
