import { expect, test, describe } from 'vitest'
import { rulesConfig } from '../rules'

const regexSpaceBetweenTypeAndScope = rulesConfig.find(rule => rule.id === 'SpaceBetweenTypeAndScope')?.regex

describe('Space Between Type And Scope', () => {
  test("not", () => {
    expect("Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs() documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo) documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs () documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs (foo) documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()

    expect("docs: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs !: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs ! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo): Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo)!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(): Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs()!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()

    expect(" docs: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs !: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs ! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo): Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo)!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo) !: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo)! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (foo) ! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs (): Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs ()!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs () !: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs ()! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect(" docs () ! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()

    expect("docs:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs!:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs !:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs! :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs ! :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo):".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs(foo)!:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs():".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs()!:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()

    expect("docs: ".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs!: ".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs !: ".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs! : ".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
    expect("docs ! : ".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBeUndefined()
  })
  
  test("match", () => {
    expect("docs (): Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () !: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () ! : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo): Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) !: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) ! : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo): Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)!: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)! : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) !: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) ! : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ():Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()!:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () :Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()! :Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () !:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () ! :Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo):Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)!:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) :Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)! :Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) !:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) ! :Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo):Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)!:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) :Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)! :Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) !:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) ! :Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ():".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()!:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()! :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () !:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () ! :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)! :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) !:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) ! :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)! :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) !:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) ! :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')

    expect("docs ()foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()!foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs ()foo!: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs ()foo!foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)!foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo)foo!: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo)foo!foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)!foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo)foo!: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo)foo!foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()foo:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()!foo:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs ()foo!:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs ()foo!foo:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)foo:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)!foo:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo)foo!:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo)foo!foo:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)foo:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)!foo:Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo)foo!:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo)foo!foo:Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()!foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs ()foo!:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs ()foo!foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)!foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo)foo!:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo)foo!foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)!foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo)foo!:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo)foo!foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')

    expect("docs () foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () !foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () ! foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () ! foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo!: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo !: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo ! : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo!foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo !foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo ! foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo ! foo : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) !foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) ! foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) ! foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo!: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo !: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo ! : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo!foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo !foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo ! foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo ! foo : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) !foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) ! foo: Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) ! foo : Update documentation".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo!: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo !: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo ! : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo!foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo !foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo ! foo: Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo ! foo : Update documentation`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')

    expect("docs () foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs ()foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () !foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () ! foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs () ! foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo!:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo !:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo ! :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo!foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo !foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo ! foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs () foo ! foo :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo)foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) !foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) ! foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo) ! foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo!:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo !:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo ! :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo!foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo !foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo ! foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo) foo ! foo :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo)foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) !foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) ! foo:".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect("docs (foo foo) ! foo :".match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo!:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo !:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo ! :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo!foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo !foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo ! foo:`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
    expect(`docs (foo foo) foo ! foo :`.match(regexSpaceBetweenTypeAndScope)?.groups?.position).toBe(' ')
  })
})
